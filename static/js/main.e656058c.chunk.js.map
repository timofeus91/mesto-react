{"version":3,"sources":["images/Vector-mesto-logo.svg","components/Header.js","components/CurrentUserContext.js","components/Card.js","components/Main.js","components/Footer.js","components/PopupWithForm.js","components/ImagePopup.js","utils/api.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddPlacePopup.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","logo","alt","CurrentUserContext","React","createContext","Card","props","currentUser","useContext","isOwn","owner","_id","cardLikeButtonClassName","likes","some","i","link","name","onClick","onCardClick","imgOpen","type","onCardDelete","onCardLike","length","Main","avatar","onEditAvatar","onEditProfile","about","onAddPlace","cards","map","item","id","Footer","Date","getFullYear","PopupWithForm","isOpen","onClose","title","onSubmit","noValidate","children","ImagePopup","card","api","config","this","_url","url","_headers","headers","res","ok","json","Promise","reject","status","fetch","then","_checkResponse","data","method","body","JSON","stringify","cardId","isLiked","_putLike","_removeLike","EditProfilePopup","useState","setName","description","setDescription","useEffect","e","preventDefault","onUpdateUser","value","onChange","target","placeholder","required","minLength","maxLength","EditAvatarPopup","avatarRef","useRef","onUpdateAvatar","current","ref","AddPlacePopup","setLink","App","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","selectedCard","setSelectedCard","setCurrentUser","setCards","closeAllPopups","getInitialCards","catch","err","console","log","getUserInfo","userInfo","Provider","changeLikeCardStatus","newCard","state","c","deleteCard","filter","editUserInfo","addNewCard","editUserAvatar","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAAe,MAA0B,8C,OCa1BA,MAVf,WACI,OAEI,wBAAQC,UAAU,sBAAlB,SACI,qBAAKA,UAAU,eAAeC,IAAKC,EAAMC,IAAI,kDCJ5CC,EAAqBC,IAAMC,gBCgDzBC,MAhDf,SAAcC,GAGV,IAAMC,EAAcJ,IAAMK,WAAWN,GAG/BO,EAAQH,EAAMI,MAAMC,MAAQJ,EAAYI,IAMxCC,EAHUN,EAAMO,MAAMC,MAAK,SAAAC,GAAC,OAAIA,EAAEJ,MAAQJ,EAAYI,OAGlB,qDAAuD,yBAiBjG,OAEI,qBAAIb,UAAU,iBAAd,UACI,qBAAKA,UAAU,kBAAkBC,IAAKO,EAAMU,KAAMf,IAAKK,EAAMW,KAAMC,QAP3E,WACIZ,EAAMa,YAAY,CAACF,KAAMX,EAAMW,KAAMD,KAAMV,EAAMU,KAAMI,SAAS,OAO5D,wBAAQC,KAAK,SAASvB,UAAS,iCAA4BW,EAAQ,GAAK,oCAAsCS,QAbtH,WACIZ,EAAMgB,aAAahB,MAaf,sBAAKR,UAAU,sBAAf,UACI,oBAAIA,UAAU,iBAAd,SAAgCQ,EAAMW,OACtC,sBAAKnB,UAAU,2BAAf,UACI,wBAAQuB,KAAK,SAASvB,UAAWc,EAAyBM,QAtB1E,WACIZ,EAAMiB,WAAWjB,MAsBL,mBAAGR,UAAU,yBAAb,SAAuCQ,EAAMO,MAAMW,mBCoBxDC,MAvDf,SAAcnB,GAIV,IAAMC,EAAcJ,IAAMK,WAAWN,GAGrC,OAEI,uBAAMJ,UAAU,UAAhB,UAEI,0BAASA,UAAU,wBAAnB,UACE,sBAAKA,UAAU,0BAAf,UACE,sBAAKA,UAAU,4BAAf,UACI,qBAAKA,UAAU,kBAAkBC,IAAKQ,EAAYmB,OAAQzB,IAAI,qDAC9D,qBAAKH,UAAU,0BAAf,SACI,wBAAQoB,QAASZ,EAAMqB,aAAc7B,UAAU,uBAAuBuB,KAAK,gBAGnF,sBAAKvB,UAAU,gBAAf,UACI,sBAAKA,UAAU,wBAAf,UACI,oBAAIA,UAAU,iBAAd,SAAgCS,EAAYU,OAC5C,wBAAQC,QAASZ,EAAMsB,cAAe9B,UAAU,uBAAuBuB,KAAK,cAEhF,mBAAGvB,UAAU,oBAAb,SAAkCS,EAAYsB,cAGlD,wBAAQX,QAASZ,EAAMwB,WAAYhC,UAAU,sBAAsBuB,KAAK,cAG5E,yBAASvB,UAAU,0BAAnB,SACI,oBAAIA,UAAU,iBAAd,SACMQ,EAAMyB,MAAMC,KAAI,SAAAC,GAAI,OACd,cAAC,EAAD,CAEAjB,KAAMiB,EAAKjB,KACXC,KAAMgB,EAAKhB,KACXJ,MAAOoB,EAAKpB,MACZM,YAAab,EAAMa,YACnBT,MAASuB,EAAKvB,MACda,WAAcjB,EAAMiB,WACpBW,GAAMD,EAAKtB,IACXW,aAAgBhB,EAAMgB,cARjBW,EAAKtB,gBC5BvBwB,MAVf,WACI,OAEI,wBAAQrC,UAAU,sBAAlB,SACI,oBAAGA,UAAU,eAAb,mBAAoC,IAAIsC,MAAOC,cAA/C,sBCeGC,MAnBf,SAAuBhC,GAGnB,OAEI,qBAAKR,UAAS,sBAAiBQ,EAAMW,KAAvB,YAA+BX,EAAMiC,OAAS,eAAgB,IAA5E,SACI,sBAAKzC,UAAS,4CAAuCQ,EAAMW,MAA3D,UACI,wBAAQnB,UAAS,oCAA+BQ,EAAMW,MAAQI,KAAK,SAASH,QAASZ,EAAMkC,UAC3F,oBAAI1C,UAAU,eAAd,SAA8BQ,EAAMmC,QACpC,sBAAMC,SAAUpC,EAAMoC,SAAU5C,UAAS,kCAA6BQ,EAAMW,MAAQA,KAAI,UAAKX,EAAMW,KAAX,SAAwB0B,YAAU,EAA1H,SACKrC,EAAMsC,iBCQZC,MAlBf,SAAoBvC,GAKhB,OAEI,qBAAKR,UAAS,0BAAqBQ,EAAMwC,KAAK1B,QAAU,eAAgB,IAAxE,SACI,sBAAKtB,UAAU,wCAAf,UACI,wBAAQA,UAAU,gCAAgCuB,KAAK,SAASH,QAASZ,EAAMkC,UAC/E,qBAAK1C,UAAU,eAAeC,IAAKO,EAAMwC,KAAK9B,KAAMf,IAAKK,EAAMwC,KAAK7B,OACpE,oBAAInB,UAAU,gCAAd,SAA+CQ,EAAMwC,KAAK7B,a,cCiH3D8B,EARH,I,WAlHR,WAAYC,GAAS,oBACjBC,KAAKC,KAAOF,EAAOG,IACnBF,KAAKG,SAAWJ,EAAOK,Q,kDAM3B,SAAeC,GACX,OAAIA,EAAIC,GACGD,EAAIE,OAGRC,QAAQC,OAAR,mJAA6CJ,EAAIK,OAAjD,Q,6BAKX,WACG,OAAOC,MAAM,GAAD,OAAIX,KAAKC,KAAT,SAAsB,CAC5BG,QAASJ,KAAKG,WAChBS,KAAKZ,KAAKa,kB,wBAKjB,SAAWC,GACP,OAAOH,MAAM,GAAD,OAAIX,KAAKC,KAAT,SAAsB,CAC5Bc,OAAQ,OACRX,QAASJ,KAAKG,SACda,KAAMC,KAAKC,UAAU,CACjBlD,KAAM8C,EAAK9C,KACXD,KAAM+C,EAAK/C,SAElB6C,KAAKZ,KAAKa,kB,yBAKjB,WACI,OAAOF,MAAM,GAAD,OAAIX,KAAKC,KAAT,YAAyB,CAC/BG,QAASJ,KAAKG,WACjBS,KAAKZ,KAAKa,kB,0BAKjB,SAAaC,GACT,OAAOH,MAAM,GAAD,OAAIX,KAAKC,KAAT,YAAyB,CACjCc,OAAQ,QACRX,QAASJ,KAAKG,SACda,KAAMC,KAAKC,UAAU,CACjBlD,KAAM8C,EAAK9C,KACXY,MAAOkC,EAAKlC,UAEjBgC,KAAKZ,KAAKa,kB,4BAKjB,SAAeC,GACX,OAAOH,MAAM,GAAD,OAAIX,KAAKC,KAAT,mBAAgC,CACxCc,OAAQ,QACRX,QAASJ,KAAKG,SACda,KAAMC,KAAKC,UAAU,CACjBzC,OAAQqC,EAAKrC,WAElBmC,KAAKZ,KAAKa,kB,sBAMjB,SAASM,GACL,OAAOR,MAAM,GAAD,OAAIX,KAAKC,KAAT,uBAA4BkB,EAA5B,KAAuC,CAC/CJ,OAAQ,MACRX,QAASJ,KAAKG,WACjBS,KAAKZ,KAAKa,kB,yBAKf,SAAYM,GACR,OAAOR,MAAM,GAAD,OAAIX,KAAKC,KAAT,uBAA4BkB,EAA5B,KAAuC,CAC/CJ,OAAQ,SACRX,QAASJ,KAAKG,WACjBS,KAAKZ,KAAKa,kB,kCAMf,SAAqBM,EAAQC,GACzB,OAAIA,EACMpB,KAAKqB,SAASF,GAGbnB,KAAKsB,YAAYH,K,wBAMhC,SAAWA,GACP,OAAOR,MAAM,GAAD,OAAIX,KAAKC,KAAT,iBAAsBkB,EAAtB,KAAiC,CACzCJ,OAAQ,SACRX,QAASJ,KAAKG,WACjBS,KAAKZ,KAAKa,oB,KAOP,CAAQ,CAChBX,IAAK,+CACLE,QAAS,CACL,eAAgB,mBAChB,cAAiB,0CCzDVmB,MA7Df,SAA0BlE,GAGtB,IAAMC,EAAcJ,IAAMK,WAAWN,GAHR,EAMLC,IAAMsE,SAAS,IANV,mBAMtBxD,EANsB,KAMhByD,EANgB,OAOSvE,IAAMsE,SAAS,IAPxB,mBAOtBE,EAPsB,KAOTC,EAPS,KAyC7B,OArBAzE,IAAM0E,WAAU,WACZH,EAAQnE,EAAYU,MACpB2D,EAAerE,EAAYsB,SAC1B,CAACtB,IAmBF,eAAC,EAAD,CACIU,KAAK,OACLwB,MAAM,4HACNF,OAAQjC,EAAMiC,OACdC,QAASlC,EAAMkC,QACfE,SArBR,SAAsBoC,GAElBA,EAAEC,iBAGFzE,EAAM0E,aAAa,CACjB/D,OACAY,MAAO8C,KAST,UAQQ,uBAAOM,MAAOhE,EAAMiE,SAxChC,SAA0BJ,GACtBJ,EAAQI,EAAEK,OAAOF,QAuCuC5D,KAAK,OAAOvB,UAAU,oCAAoCmB,KAAK,aAAamE,YAAY,qBAAMC,UAAQ,EAACC,UAAU,IAAIC,UAAU,KAAKrD,GAAG,oBACvL,sBAAMpC,UAAU,cAAcoC,GAAG,0BACjC,uBAAO+C,MAAON,EAAaO,SAtCvC,SAAiCJ,GAC7BF,EAAeE,EAAEK,OAAOF,QAqC+C5D,KAAK,OAAOvB,UAAU,uCAAuCmB,KAAK,cAAcmE,YAAY,kCAASC,UAAQ,EAACC,UAAU,IAAIC,UAAU,MAAMrD,GAAG,qBAC9M,sBAAMpC,UAAU,cAAcoC,GAAG,2BACjC,wBAAQpC,UAAU,gBAAgBuB,KAAK,SAAvC,wECnBDmE,MAnCf,SAAyBlF,GAGrB,IAAMmF,EAAYtF,IAAMuF,SAcxB,OACI,eAAC,EAAD,CACIzE,KAAK,aACLwB,MAAM,wFACNF,OAAQjC,EAAMiC,OACdC,QAASlC,EAAMkC,QACfE,SAjBR,SAAsBoC,GAClBA,EAAEC,iBAEFzE,EAAMqF,eAAe,CACnBjE,OAAQ+D,EAAUG,QAAQX,SAQ5B,UAQQ,uBAAOY,IAAKJ,EAAWpE,KAAK,MAAMvB,UAAU,4DAA4DmB,KAAK,mBAAmBmE,YAAY,qGAAqBC,UAAQ,EAACnD,GAAG,eAC7K,sBAAMpC,UAAU,cAAcoC,GAAG,qBACjC,wBAAQpC,UAAU,yCAAyCuB,KAAK,SAAhE,wECoBDyE,MAhDf,SAAuBxF,GAAO,MAGEH,IAAMsE,SAAS,IAHjB,mBAGfxD,EAHe,KAGTyD,EAHS,OAIEvE,IAAMsE,SAAS,IAJjB,mBAIfzD,EAJe,KAIT+E,EAJS,KA4BxB,OACE,eAAC,EAAD,CACA9E,KAAK,QACLwB,MAAM,gEACNF,OAAQjC,EAAMiC,OACdC,QAASlC,EAAMkC,QACfE,SAlBJ,SAAsBoC,GAElBA,EAAEC,iBAGFzE,EAAMwB,WAAW,CACfb,KAAMA,EACND,KAAMA,KAMR,UAQI,uBAAOiE,MAAOhE,EAAMiE,SA9BxB,SAA0BJ,GACtBJ,EAAQI,EAAEK,OAAOF,QA6B+B5D,KAAK,OAAOvB,UAAU,oCAAoCmB,KAAK,mBAAmBmE,YAAY,mDAAWC,UAAQ,EAACC,UAAU,IAAIC,UAAU,KAAKrD,GAAG,qBAClM,sBAAMpC,UAAU,cAAcoC,GAAG,2BACjC,uBAAO+C,MAAOjE,EAAMkE,SA5BxB,SAA0BJ,GACtBiB,EAAQjB,EAAEK,OAAOF,QA2B+B5D,KAAK,MAAMvB,UAAU,uCAAuCmB,KAAK,mBAAmBmE,YAAY,qGAAqBC,UAAQ,EAACnD,GAAG,eACjL,sBAAMpC,UAAU,cAAcoC,GAAG,qBACjC,wBAAQpC,UAAU,gBAAgBuB,KAAK,SAAvC,wEC+JG2E,MA7Lf,WAAgB,IAAD,EACiD7F,IAAMsE,UAAS,GADhE,mBACJwB,EADI,KACoBC,EADpB,OAE2C/F,IAAMsE,UAAS,GAF1D,mBAEJ0B,EAFI,KAEiBC,EAFjB,OAG+CjG,IAAMsE,UAAS,GAH9D,mBAGJ4B,EAHI,KAGmBC,EAHnB,OAI6BnG,IAAMsE,SAAS,CAACxD,KAAM,GAAID,KAAM,GAAII,SAAS,IAJ1E,mBAIJmF,EAJI,KAIUC,EAJV,OAK2BrG,IAAMsE,SAAS,CAEjDxD,KAAM,iCACNY,MAAO,iCACPH,OAAQ,+EATD,mBAKJnB,EALI,KAKSkG,EALT,OAWetG,IAAMsE,SAAS,IAX9B,mBAWJ1C,EAXI,KAWG2E,EAXH,KAwDX,SAASC,IACLL,GAAyB,GACzBJ,GAA0B,GAC1BE,GAAuB,GACvBI,EAAgB,CAACvF,KAAM,GAAID,KAAM,GAAII,SAAS,IA4EpD,OAzHEjB,IAAM0E,WAAU,WAEZ9B,EAAI6D,kBACC/C,MAAK,SAAA9B,GACF2E,EAAS3E,MAGZ8E,OAAM,SAACC,GACJC,QAAQC,IAAR,wGAAkCF,SAG3C,IAIH3G,IAAM0E,WAAU,WACZ9B,EAAIkE,cACHpD,MAAK,SAAAqD,GACFT,EAAeS,MAElBL,OAAM,SAACC,GACJC,QAAQC,IAAR,wGAAkCF,SAEvC,IAmGH,cAAC5G,EAAmBiH,SAApB,CAA6BlC,MAAQ1E,EAArC,SACA,sBAAKT,UAAU,OAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,CACA8B,cA/FJ,WACIsE,GAA0B,IA+F1BpE,WA5FJ,WACIsE,GAAuB,IA4FvBzE,aAtGJ,WACI2E,GAAyB,IAsGzBnF,YAhFJ,SAAyB2B,GACrB0D,EAAgB1D,IAgFhBf,MAAOA,EACPR,WA7EJ,SAAwBuB,GAGpB,IAAMuB,EAAUvB,EAAKjC,MAAMC,MAAK,SAAAC,GAAC,OAAIA,EAAEJ,MAAQJ,EAAYI,OAG3DoC,EAAIqE,qBAAqBtE,EAAKZ,IAAKmC,GAC9BR,MAAK,SAACwD,GACHX,GAAS,SAAAY,GAAK,OAAIA,EAAMtF,KAAI,SAACuF,GAAD,OAAOA,EAAE5G,MAAQmC,EAAKZ,GAAKmF,EAAUE,WAEpEV,OAAM,SAACC,GACJC,QAAQC,IAAR,wGAAkCF,QAmE1CxF,aA9DJ,SAA0BwB,GACtBC,EAAIyE,WAAW1E,EAAKZ,IACf2B,MAAK,SAAC2D,GAEHd,GAAS,SAAAY,GAAK,OAAIA,EAAMG,QAAO,SAACF,GAAD,OAAOA,EAAE5G,MAAQmC,EAAKZ,GAAK,KAAOqF,WAEpEV,OAAM,SAACC,GACJC,QAAQC,IAAR,wGAAkCF,UAyD1C,cAAC,EAAD,IAEA,0BAAShH,UAAU,SAAnB,UAEI,cAAC,EAAD,CACAyC,OAAQ0D,EACRzD,QAASmE,EACT3B,aA1DR,SAA0BjB,GACtBhB,EAAI2E,aAAa3D,GACZF,MAAK,SAAAE,GACF0C,EAAe1C,GACf4C,OAEHE,OAAM,SAACC,GACJC,QAAQC,IAAR,wGAAkCF,UAsDtC,cAAC,EAAD,CACAvE,OAAQ4D,EACR3D,QAASmE,EACT7E,WAvCR,SAAwBiC,GAEpBhB,EAAI4E,WAAW5D,GACVF,MAAK,SAAAwD,GACFX,EAAS,CAACW,GAAF,mBAActF,KACtB4E,OAEHE,OAAM,SAACC,GACJC,QAAQC,IAAR,wGAAkCF,UAkCtC,cAAC,EAAD,CAAe7F,KAAK,aAAawB,MAAM,2DAAvC,SAEI,wBAAQ3C,UAAU,yCAAyCuB,KAAK,SAAhE,4BAIJ,cAAC,EAAD,CACAkB,OAAQ8D,EACR7D,QAASmE,EACThB,eAhER,SAA4BjE,GACxBqF,QAAQC,IAAItF,GACZqB,EAAI6E,eAAelG,GACdmC,MAAK,SAAAnC,GACF+E,EAAe/E,GACfiF,OAEHE,OAAM,SAACC,GACJC,QAAQC,IAAR,wGAAkCF,UA2DtC,cAAC,EAAD,CACAtE,QAASmE,EACT7D,KAAMyD,aCtLHsB,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlE,MAAK,YAAkD,IAA/CmE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e656058c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Vector-mesto-logo.c2821b38.svg\";","import React from 'react';\r\nimport logo from '../images/Vector-mesto-logo.svg';\r\n\r\nfunction Header() {\r\n    return (\r\n        (\r\n        <header className='header page__header'>\r\n            <img className='header__logo' src={logo} alt='Логотип'/>\r\n        </header>\r\n        )\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n\r\nexport const CurrentUserContext = React.createContext();\r\nexport const currentUser = {};","import React from 'react';\r\nimport {CurrentUserContext} from './CurrentUserContext';\r\n\r\nfunction Card(props) {\r\n\r\n    //Подписываемся на контекст\r\n    const currentUser = React.useContext(CurrentUserContext);\r\n\r\n    // Определяем, являемся ли мы владельцем текущей карточки\r\n    const isOwn = props.owner._id === currentUser._id;\r\n\r\n    // Определяем, есть ли у карточки лайк, поставленный текущим пользователем\r\n    const isLiked = props.likes.some(i => i._id === currentUser._id);\r\n    \r\n    // Создаём переменную, которую после зададим в `className` для кнопки лайка\r\n    const cardLikeButtonClassName = isLiked ? 'elements__heart-button elements__heart-button_like' : 'elements__heart-button' ;\r\n\r\n    // обработчик клика лайка\r\n    function handleLikeClick() {\r\n        props.onCardLike(props);\r\n    };\r\n\r\n    //обработчки кнопки удаления карточки\r\n    function handleDeleteClick() {\r\n        props.onCardDelete(props)\r\n    }\r\n\r\n    //обработчик для сбора нужной информации и открытия большого варианта фото\r\n    function handleClick() {\r\n        props.onCardClick({name: props.name, link: props.link, imgOpen: true});\r\n      }  \r\n\r\n    return(\r\n    (\r\n        <li className='elements__item'>\r\n            <img className=\"elements__photo\" src={props.link} alt={props.name} onClick={handleClick}/>\r\n            <button type=\"button\" className={`elements__delete-photo ${isOwn ? '' : 'elements__delete-photo_no-active'}`} onClick={handleDeleteClick}></button>\r\n            <div className='elements__container'>\r\n                <h2 className='elements__text'>{props.name}</h2>\r\n                <div className=\"elements__like-container\">\r\n                    <button type=\"button\" className={cardLikeButtonClassName} onClick={handleLikeClick}></button>\r\n                    <p className=\"elements__like-counter\">{props.likes.length}</p>\r\n                </div>\r\n            </div> \r\n        </li> \r\n    )\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport {CurrentUserContext} from './CurrentUserContext';\r\n\r\n\r\n\r\nfunction Main(props) {\r\n    \r\n    \r\n    //подписываемся на контекст\r\n    const currentUser = React.useContext(CurrentUserContext);\r\n\r\n   \r\n    return(\r\n        (\r\n        <main className='content'>\r\n            \r\n            <section className='profile page__profile'>\r\n              <div className='profile__main-container'>\r\n                <div className='profile__avatar-container'>\r\n                    <img className='profile__avatar' src={currentUser.avatar} alt='Аватарка'/>\r\n                    <div className=\"profile__avatar-overlay\">\r\n                        <button onClick={props.onEditAvatar} className='profile__avatar-edit' type=\"button\"></button>\r\n                    </div> \r\n                </div>\r\n                <div className='profile__info'>\r\n                    <div className='profile__title-button'>\r\n                        <h1 className='profile__title'>{currentUser.name}</h1>\r\n                        <button onClick={props.onEditProfile} className='profile__edit-button' type='button'></button>\r\n                    </div>\r\n                    <p className='profile__subtitle'>{currentUser.about}</p>\r\n                </div>\r\n              </div>\r\n                <button onClick={props.onAddPlace} className='profile__add-button' type='button'></button>\r\n\r\n            </section>\r\n            <section className='elements page__elements'>\r\n                <ul className='elements__list'>\r\n                    { props.cards.map(item => (\r\n                            <Card\r\n                            key={item._id}\r\n                            link={item.link}\r\n                            name={item.name}\r\n                            likes={item.likes}\r\n                            onCardClick={props.onCardClick}\r\n                            owner = {item.owner}\r\n                            onCardLike = {props.onCardLike}\r\n                            id = {item._id}\r\n                            onCardDelete = {props.onCardDelete}\r\n                            \r\n                            \r\n                            />\r\n                    )\r\n                        )}\r\n                </ul>\r\n            </section>\r\n        </main>\r\n        )\r\n    );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nfunction Footer() {\r\n    return(\r\n        (\r\n        <footer className=\"footer page__footer\">\r\n            <p className='footer__text'>&copy; {new Date().getFullYear()} Mesto Russia</p>\r\n        </footer>\r\n        )\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\nfunction PopupWithForm(props) {\r\n\r\n    \r\n    return (\r\n        (\r\n        <div className={`popup popup_${props.name} ${props.isOpen ? 'popup_opened' :''}`}>\r\n            <div className={`popup__container popup__container_${props.name}`}>\r\n                <button className={`popup__close popup__close_${props.name}`} type='button' onClick={props.onClose}></button>\r\n                <h2 className='popup__title'>{props.title}</h2>\r\n                <form onSubmit={props.onSubmit} className={`popup__form popup__form_${props.name}`} name={`${props.name}-form`} noValidate>\r\n                    {props.children}\r\n                </form>\r\n            </div>\r\n        </div>\r\n        )\r\n    );\r\n\r\n}\r\n\r\nexport default PopupWithForm;\r\n\r\n\r\n","import React from 'react';\r\n\r\nfunction ImagePopup(props) {\r\n    //console.log(props);\r\n\r\n    \r\n\r\n    return(\r\n        (\r\n        <div className={`popup popup_img ${props.card.imgOpen ? 'popup_opened' :''}`}>\r\n            <div className='popup__container popup__container_img'>\r\n                <button className=\"popup__close popup__close_img\" type=\"button\" onClick={props.onClose}></button>\r\n                <img className=\"popup__image\" src={props.card.link} alt={props.card.name}/>\r\n                <h2 className=\"popup__title popup__title_img\">{props.card.name}</h2>\r\n            </div>\r\n        </div>\r\n        )\r\n    );\r\n}\r\n\r\nexport default ImagePopup;","//класс для подключения api\r\n\r\n class Api {\r\n    //конструктор принимает адрес куда обращаться за данными (или куда их отправлять) и настройки.\r\n    constructor(config) {\r\n        this._url = config.url;\r\n        this._headers = config.headers;\r\n    }\r\n\r\n\r\n    //приватный метод с повтряющимся кодом у всех запросов (то что идет после 1 return)\r\n\r\n    _checkResponse(res) {\r\n        if (res.ok) {\r\n            return res.json()\r\n        }\r\n\r\n        return Promise.reject(`Сервер недоступен. Ошибка: ${res.status}.`);\r\n    }\r\n\r\n    // метод по инициализации карточек с сервера\r\n\r\n    getInitialCards() {\r\n       return fetch(`${this._url}cards`, {\r\n             headers: this._headers, \r\n        }).then(this._checkResponse);\r\n    }\r\n\r\n    //метод по добавлению новой карточки\r\n\r\n    addNewCard(data) {\r\n        return fetch(`${this._url}cards`, {\r\n              method: 'POST',\r\n              headers: this._headers,\r\n              body: JSON.stringify({\r\n                  name: data.name,\r\n                  link: data.link,\r\n              })\r\n        }).then(this._checkResponse);\r\n    }\r\n\r\n    //метод по получению информации о пользователе\r\n\r\n    getUserInfo() {\r\n        return fetch(`${this._url}users/me`, {\r\n              headers: this._headers,\r\n        }).then(this._checkResponse);\r\n    }\r\n\r\n    //метод по изменению информации о пользователе\r\n\r\n    editUserInfo(data) {\r\n        return fetch(`${this._url}users/me`, {\r\n            method: 'PATCH',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                name: data.name,\r\n                about: data.about,\r\n              })\r\n        }).then(this._checkResponse);\r\n    }\r\n\r\n    //метод по смене аватарки\r\n\r\n    editUserAvatar(data) {\r\n        return fetch(`${this._url}users/me/avatar`, {\r\n            method: 'PATCH',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                avatar: data.avatar\r\n              })\r\n        }).then(this._checkResponse);\r\n    }\r\n\r\n\r\n    //приватный метод по установке лайка\r\n\r\n    _putLike(cardId) {\r\n        return fetch(`${this._url}cards/likes/${cardId}/`, {\r\n            method: 'PUT',\r\n            headers: this._headers,\r\n      }).then(this._checkResponse);\r\n    }\r\n\r\n    //приватный метод по снятию лайка\r\n\r\n    _removeLike(cardId) {\r\n        return fetch(`${this._url}cards/likes/${cardId}/`, {\r\n            method: 'DELETE',\r\n            headers: this._headers,\r\n      }).then(this._checkResponse);\r\n    }\r\n\r\n\r\n    //Единый метод по установке и снятию лайка\r\n\r\n    changeLikeCardStatus(cardId, isLiked) {\r\n        if (isLiked) {\r\n           return this._putLike(cardId);\r\n        }\r\n        else {\r\n            return this._removeLike(cardId);\r\n        }\r\n    }\r\n\r\n    //метод по удалению карточки\r\n\r\n    deleteCard(cardId) {\r\n        return fetch(`${this._url}cards/${cardId}/`, {\r\n            method: 'DELETE',\r\n            headers: this._headers,\r\n      }).then(this._checkResponse);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst api = new Api({\r\n    url: \"https://mesto.nomoreparties.co/v1/cohort-20/\", \r\n    headers: {\r\n        \"content-type\": \"application/json\",\r\n        \"Authorization\": \"43c52a6d-19a6-461e-b067-2db5e03ba70b\",\r\n    }\r\n});\r\n\r\nexport default api;\r\n","import React from 'react';\r\nimport PopupWithForm from './PopupWithForm';\r\nimport {CurrentUserContext} from './CurrentUserContext';\r\n\r\nfunction EditProfilePopup(props) {\r\n\r\n    //Подписываемся на контекст\r\n    const currentUser = React.useContext(CurrentUserContext);\r\n\r\n    //стейт-переменные для имени и профессии\r\n    const [name, setName] = React.useState('')\r\n    const [description, setDescription] = React.useState('')\r\n\r\n    // обработчики для изменения инпутов и обновления стейтов \r\n    function handleChangeName(e) {\r\n        setName(e.target.value);\r\n    } \r\n\r\n    function handleChangeDescription(e) {\r\n        setDescription(e.target.value);\r\n    } \r\n\r\n\r\n    //эффект для обновления переменных состояния при изминении контекста\r\n    React.useEffect(() => {\r\n        setName(currentUser.name);\r\n        setDescription(currentUser.about);\r\n      }, [currentUser]); \r\n\r\n    //функция по сбрасыванию действия по умолчанию и для передачи значений инпутов в следующий компонент\r\n    function handleSubmit(e) {\r\n        // Запрещаем браузеру переходить по адресу формы\r\n        e.preventDefault();\r\n      \r\n        // Передаём значения управляемых компонентов во внешний обработчик\r\n        props.onUpdateUser({\r\n          name,\r\n          about: description,\r\n        });\r\n      } \r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <PopupWithForm \r\n            name='user'\r\n            title='Редактировать профиль' \r\n            isOpen={props.isOpen}\r\n            onClose={props.onClose}\r\n            onSubmit={handleSubmit}\r\n            >\r\n            \r\n                <input value={name} onChange={handleChangeName} type=\"text\" className=\"popup__input popup__input_topform\" name=\"popup-name\" placeholder=\"Имя\" required minLength='2' maxLength='40' id=\"name-user-input\"/>\r\n                <span className=\"popup__span\" id=\"name-user-input-error\"></span>\r\n                <input value={description} onChange={handleChangeDescription}  type=\"text\" className=\"popup__input popup__input_bottomform\" name=\"popup-about\" placeholder=\"О себе\" required minLength='2' maxLength='200' id=\"about-user-input\"/>\r\n                <span className=\"popup__span\" id=\"about-user-input-error\"></span>\r\n                <button className=\"popup__button\" type='submit'>Сохранить</button>\r\n            \r\n        </PopupWithForm>\r\n    )\r\n\r\n}\r\n\r\nexport default EditProfilePopup;","import React from 'react';\r\nimport PopupWithForm from './PopupWithForm';\r\n\r\n\r\nfunction EditAvatarPopup(props) {\r\n    \r\n    //создаем реф\r\n    const avatarRef = React.useRef()\r\n    \r\n    //функция по сбрасыванию действия по умолчанию и для передачи значений инпутов в следующий компонент\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        \r\n        props.onUpdateAvatar({\r\n          avatar: avatarRef.current.value\r\n        });\r\n      }\r\n      \r\n\r\n\r\n\r\n    return (\r\n        <PopupWithForm\r\n            name='new-avatar'\r\n            title='Обновить аватар'\r\n            isOpen={props.isOpen}\r\n            onClose={props.onClose}\r\n            onSubmit={handleSubmit}\r\n            >\r\n                \r\n                <input ref={avatarRef} type=\"url\" className=\"popup__input popup__input_topform popup__input_new-avatar\" name=\"new-avatar-photo\" placeholder=\"Ссылка на картинку\" required id=\"new-avatar\"/>\r\n                <span className='popup__span' id=\"new-avatar-error\"></span>\r\n                <button className=\"popup__button popup__button_new-avatar\" type='submit'>Сохранить</button>\r\n                \r\n            </PopupWithForm>\r\n    )\r\n\r\n}\r\n\r\nexport default EditAvatarPopup;","import React from 'react';\r\nimport PopupWithForm from './PopupWithForm';\r\n\r\n\r\nfunction AddPlacePopup(props) {\r\n        \r\n        //стейт-переменные для названия карточки и ссылки на картинку\r\n        const [name, setName] = React.useState('')\r\n        const [link, setLink] = React.useState('')\r\n    \r\n        // обработчики для изменения инпутов и обновления стейтов \r\n        function handleChangeName(e) {\r\n            setName(e.target.value);\r\n        } \r\n    \r\n        function handleChangeLink(e) {\r\n            setLink(e.target.value);\r\n        } \r\n\r\n           //функция по сбрасыванию действия по умолчанию и для передачи значений инпутов в следующий компонент\r\n    function handleSubmit(e) {\r\n        // Запрещаем браузеру переходить по адресу формы\r\n        e.preventDefault();\r\n      \r\n        // Передаём значения управляемых компонентов во внешний обработчик\r\n        props.onAddPlace({\r\n          name: name,\r\n          link: link,\r\n        });\r\n      }\r\n      \r\n      \r\n      return (\r\n        <PopupWithForm\r\n        name='place'\r\n        title='Новое место'\r\n        isOpen={props.isOpen}\r\n        onClose={props.onClose}\r\n        onSubmit={handleSubmit}\r\n        >\r\n            \r\n            <input value={name} onChange={handleChangeName} type=\"text\" className=\"popup__input popup__input_topform\" name=\"popup-name-place\" placeholder=\"Название\" required minLength='2' maxLength='30' id=\"name-place-input\"/>\r\n            <span className='popup__span' id=\"name-place-input-error\"></span>\r\n            <input value={link} onChange={handleChangeLink} type=\"url\" className=\"popup__input popup__input_bottomform\" name=\"popup-link-photo\" placeholder=\"Ссылка на картинку\" required id=\"link-input\"/>\r\n            <span className='popup__span' id=\"link-input-error\"></span>\r\n            <button className=\"popup__button\" type='submit'>Сохранить</button>\r\n            \r\n        </PopupWithForm>\r\n      );\r\n\r\n}\r\n\r\nexport default AddPlacePopup;","import React from 'react';\r\n\r\nimport Header from './Header';\r\nimport Main from './Main';\r\nimport Footer from './Footer';\r\nimport PopupWithForm from './PopupWithForm';\r\nimport ImagePopup from './ImagePopup';\r\nimport api from '../utils/api';\r\nimport {CurrentUserContext} from './CurrentUserContext';\r\nimport EditProfilePopup from './EditProfilePopup';\r\nimport EditAvatarPopup from './EditAvatarPopup';\r\nimport AddPlacePopup from './AddPlacePopup';\r\n\r\n\r\n\r\nfunction App() {\r\n    const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\r\n    const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\r\n    const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\r\n    const [selectedCard, setSelectedCard] = React.useState({name: '', link: '', imgOpen: false});\r\n    const [currentUser, setCurrentUser] = React.useState({\r\n        //пока идет загрузка с сервера чтобы позиции не были пустыми и говорили о выполнении загрузки\r\n        name: 'Ждёмс',\r\n        about: 'Ждёмс',\r\n        avatar: 'https://i007.fotocdn.net/s124/4a5340ffd4d2b33c/public_pin_l/2826322361.jpg'\r\n    });\r\n    const [cards, setCards] = React.useState([]);\r\n\r\n\r\n    //Загружаем карточки с сервера. Проставлена зависимость. \r\n    React.useEffect(() => {\r\n        \r\n        api.getInitialCards()\r\n            .then(cards => {\r\n                setCards(cards);\r\n            })\r\n\r\n            .catch((err) => {\r\n                console.log(`Произошла ошибка - ${err}`);\r\n            })\r\n        \r\n    }, []);\r\n\r\n\r\n    //эффект для получения информации о пользователе\r\n    React.useEffect(() => {\r\n        api.getUserInfo()\r\n        .then(userInfo => {\r\n            setCurrentUser(userInfo);\r\n        })\r\n        .catch((err) => {\r\n            console.log(`Произошла ошибка - ${err}`);\r\n        })\r\n    }, []);\r\n\r\n    //обработчки для открытия попапов\r\n    function handleEditAvatarClick() {\r\n        setIsEditAvatarPopupOpen(true);\r\n    }\r\n    \r\n    \r\n    function handleEditProfileClick() {\r\n        setIsEditProfilePopupOpen(true);\r\n    }\r\n    \r\n    function handleAddPlaceClick() {\r\n        setIsAddPlacePopupOpen(true);\r\n    }\r\n\r\n\r\n    //обработчик по закрытию попапов\r\n    function closeAllPopups() {\r\n        setIsEditAvatarPopupOpen(false);\r\n        setIsEditProfilePopupOpen(false);\r\n        setIsAddPlacePopupOpen(false);\r\n        setSelectedCard({name: '', link: '', imgOpen: false});\r\n    }\r\n\r\n    //обработчик для открытия большого варианта фото\r\n    function handleCardClick(card) {\r\n        setSelectedCard(card);\r\n    }\r\n\r\n    //функция по снятию-постановке лайка на карточку с использованием api\r\n    function handleCardLike(card) {\r\n\r\n        // Снова проверяем, есть ли уже лайк на этой карточке\r\n        const isLiked = card.likes.some(i => i._id === currentUser._id);\r\n        \r\n        // Отправляем запрос в API и получаем обновлённые данные карточки\r\n        api.changeLikeCardStatus(card.id, !isLiked)\r\n            .then((newCard) => {\r\n                setCards(state => state.map((c) => c._id === card.id ? newCard : c)); \r\n            })\r\n            .catch((err) => {\r\n                console.log(`Произошла ошибка - ${err}`);\r\n            })\r\n    }\r\n\r\n    //функция по удалению карточки с использованием api\r\n    function handleCardDelete(card) {\r\n        api.deleteCard(card.id)\r\n            .then((deleteCard) => {\r\n                //console.log(deleteCard);\r\n                setCards(state => state.filter((c) => c._id === card.id ? null : c));\r\n            })\r\n            .catch((err) => {\r\n                console.log(`Произошла ошибка - ${err}`);\r\n            })\r\n\r\n    }\r\n\r\n    //обработчки для отправки через api новых данных о пользователе и обновлении страницы\r\n    function handleUpdateUser(data) {\r\n        api.editUserInfo(data)\r\n            .then(data => {\r\n                setCurrentUser(data)\r\n                closeAllPopups()\r\n            })\r\n            .catch((err) => {\r\n                console.log(`Произошла ошибка - ${err}`);\r\n            })\r\n    }\r\n\r\n    //обработчик для отправки через api данных о новом аватаре и обновлении страницы\r\n    function handleUpdateAvatar(avatar) {\r\n        console.log(avatar);\r\n        api.editUserAvatar(avatar)\r\n            .then(avatar => {\r\n                setCurrentUser(avatar)\r\n                closeAllPopups()\r\n            })\r\n            .catch((err) => {\r\n                console.log(`Произошла ошибка - ${err}`);\r\n            })\r\n    }\r\n\r\n    //обработчик для добавления новой карточки через api и обновлении страницы\r\n    function handleAddPlace(data) {\r\n        //console.log(data);\r\n        api.addNewCard(data)\r\n            .then(newCard => {\r\n                setCards([newCard, ...cards]);\r\n                closeAllPopups() \r\n            })\r\n            .catch((err) => {\r\n                console.log(`Произошла ошибка - ${err}`);\r\n            })\r\n\r\n    }\r\n\r\n  return (\r\n    <CurrentUserContext.Provider value={ currentUser }>\r\n    <div className=\"page\">\r\n        <Header />\r\n        <Main\r\n        onEditProfile={handleEditProfileClick}\r\n        onAddPlace={handleAddPlaceClick}\r\n        onEditAvatar={handleEditAvatarClick}\r\n        onCardClick={handleCardClick}\r\n        cards={cards}\r\n        onCardLike={handleCardLike}\r\n        onCardDelete={handleCardDelete}\r\n        />\r\n        <Footer />\r\n\r\n        <section className='popups'>\r\n\r\n            <EditProfilePopup \r\n            isOpen={isEditProfilePopupOpen} \r\n            onClose={closeAllPopups}\r\n            onUpdateUser={handleUpdateUser} /> \r\n\r\n\r\n            <AddPlacePopup\r\n            isOpen={isAddPlacePopupOpen}\r\n            onClose={closeAllPopups}\r\n            onAddPlace={handleAddPlace} />\r\n\r\n\r\n            <PopupWithForm name='areyousure' title='Вы уверены?'>\r\n                \r\n                <button className=\"popup__button popup__button_areyousure\" type='submit'>Да</button>\r\n                \r\n            </PopupWithForm>\r\n\r\n            <EditAvatarPopup\r\n            isOpen={isEditAvatarPopupOpen} \r\n            onClose={closeAllPopups}\r\n            onUpdateAvatar={handleUpdateAvatar}\r\n            />\r\n\r\n            <ImagePopup\r\n            onClose={closeAllPopups}\r\n            card={selectedCard}\r\n            \r\n             />\r\n            \r\n        </section>\r\n    </div>\r\n</CurrentUserContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './components/App';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}